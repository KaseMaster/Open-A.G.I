#!/usr/bin/env python3
"""
Script para investigar las 6 alertas cr√≠ticas del Framework AEGIS
"""

import sys
import asyncio
import json
from datetime import datetime
from pathlib import Path

# Agregar el directorio actual al path
sys.path.append('.')

try:
    from alert_system import AEGISAlertSystem
    ALERT_SYSTEM_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Sistema de alertas no disponible: {e}")
    ALERT_SYSTEM_AVAILABLE = False

async def investigate_critical_alerts():
    """Investiga las alertas cr√≠ticas del sistema"""
    
    print("üîç INVESTIGACI√ìN DE ALERTAS CR√çTICAS - FRAMEWORK AEGIS")
    print("=" * 60)
    
    if not ALERT_SYSTEM_AVAILABLE:
        print("‚ùå Sistema de alertas no disponible. Buscando alertas en logs...")
        await investigate_from_logs()
        return
    
    try:
        # Inicializar sistema de alertas
        alert_system = AEGISAlertSystem()
        await alert_system.start()
        
        # Obtener todas las alertas
        alerts = await alert_system.get_alerts()
        
        print(f"üìä Total de alertas en el sistema: {len(alerts)}")
        
        # Filtrar alertas cr√≠ticas
        critical_alerts = []
        for alert in alerts:
            severity = alert.get('severity', '').upper()
            if severity in ['CRITICAL', 'EMERGENCY', 'HIGH']:
                critical_alerts.append(alert)
        
        print(f"üö® Alertas cr√≠ticas encontradas: {len(critical_alerts)}")
        print()
        
        if not critical_alerts:
            print("‚úÖ No se encontraron alertas cr√≠ticas activas")
            await generate_test_alerts(alert_system)
        else:
            await analyze_critical_alerts(critical_alerts)
        
        await alert_system.stop()
        
    except Exception as e:
        print(f"‚ùå Error accediendo al sistema de alertas: {e}")
        await investigate_from_logs()

async def analyze_critical_alerts(alerts):
    """Analiza las alertas cr√≠ticas encontradas"""
    
    print("üìã AN√ÅLISIS DETALLADO DE ALERTAS CR√çTICAS")
    print("-" * 50)
    
    categories = {}
    sources = {}
    
    for i, alert in enumerate(alerts, 1):
        print(f"\nüö® ALERTA CR√çTICA #{i}")
        print(f"   T√≠tulo: {alert.get('title', 'Sin t√≠tulo')}")
        print(f"   Severidad: {alert.get('severity', 'N/A')}")
        print(f"   Categor√≠a: {alert.get('category', 'N/A')}")
        print(f"   Fuente: {alert.get('source', 'N/A')}")
        print(f"   Descripci√≥n: {alert.get('description', 'N/A')}")
        print(f"   Timestamp: {alert.get('timestamp', 'N/A')}")
        
        # Agrupar por categor√≠a
        category = alert.get('category', 'UNKNOWN')
        categories[category] = categories.get(category, 0) + 1
        
        # Agrupar por fuente
        source = alert.get('source', 'UNKNOWN')
        sources[source] = sources.get(source, 0) + 1
    
    # Resumen por categor√≠as
    print(f"\nüìä RESUMEN POR CATEGOR√çAS:")
    for category, count in categories.items():
        print(f"   {category}: {count} alertas")
    
    # Resumen por fuentes
    print(f"\nüìä RESUMEN POR FUENTES:")
    for source, count in sources.items():
        print(f"   {source}: {count} alertas")

async def generate_test_alerts(alert_system):
    """Genera alertas de prueba para demostraci√≥n"""
    
    print("üß™ Generando alertas de prueba para investigaci√≥n...")
    
    test_alerts = [
        {
            'title': 'Fallo cr√≠tico en sistema criptogr√°fico',
            'description': 'Error en la inicializaci√≥n del motor criptogr√°fico. Claves de encriptaci√≥n no disponibles.',
            'severity': 'CRITICAL',
            'category': 'SECURITY',
            'source': 'crypto_framework'
        },
        {
            'title': 'Red P2P desconectada',
            'description': 'P√©rdida total de conectividad con la red P2P. Nodos no accesibles.',
            'severity': 'CRITICAL',
            'category': 'NETWORK',
            'source': 'p2p_network'
        },
        {
            'title': 'Consenso distribuido fallido',
            'description': 'Algoritmo de consenso no puede alcanzar acuerdo. Posible partici√≥n de red.',
            'severity': 'EMERGENCY',
            'category': 'SYSTEM',
            'source': 'consensus_protocol'
        },
        {
            'title': 'Almacenamiento distribuido corrupto',
            'description': 'Detecci√≥n de corrupci√≥n en datos distribuidos. Integridad comprometida.',
            'severity': 'CRITICAL',
            'category': 'SYSTEM',
            'source': 'storage_system'
        },
        {
            'title': 'Sobrecarga de recursos cr√≠tica',
            'description': 'CPU al 95%, memoria al 90%. Sistema en riesgo de colapso.',
            'severity': 'CRITICAL',
            'category': 'PERFORMANCE',
            'source': 'resource_manager'
        },
        {
            'title': 'Intento de intrusi√≥n detectado',
            'description': 'M√∫ltiples intentos de acceso no autorizado desde IP sospechosa.',
            'severity': 'EMERGENCY',
            'category': 'SECURITY',
            'source': 'security_protocols'
        }
    ]
    
    print(f"üìù Creando {len(test_alerts)} alertas de prueba...")
    
    for i, alert_data in enumerate(test_alerts, 1):
        try:
            await alert_system.create_alert(
                title=alert_data['title'],
                description=alert_data['description'],
                severity=alert_data['severity'],
                category=alert_data['category'],
                source=alert_data['source']
            )
            print(f"   ‚úÖ Alerta {i} creada: {alert_data['title']}")
        except Exception as e:
            print(f"   ‚ùå Error creando alerta {i}: {e}")
    
    # Esperar un momento para que se procesen
    await asyncio.sleep(2)
    
    # Obtener las alertas creadas
    alerts = await alert_system.get_alerts()
    critical_alerts = [a for a in alerts if a.get('severity') in ['CRITICAL', 'EMERGENCY']]
    
    if critical_alerts:
        await analyze_critical_alerts(critical_alerts)

async def investigate_from_logs():
    """Investiga alertas desde archivos de log"""
    
    print("üîç Investigando alertas desde archivos de log...")
    
    log_files = [
        'tor_integration.log',
        'crypto_security.log',
        'ci_run_18436837775.log'
    ]
    
    critical_patterns = [
        'ERROR',
        'CRITICAL',
        'FAILED',
        'EXCEPTION',
        'TIMEOUT',
        'CONNECTION REFUSED'
    ]
    
    alerts_found = []
    
    for log_file in log_files:
        log_path = Path(log_file)
        if log_path.exists():
            print(f"\nüìÑ Analizando {log_file}...")
            try:
                with open(log_path, 'r', encoding='utf-8', errors='ignore') as f:
                    lines = f.readlines()
                
                for line_num, line in enumerate(lines, 1):
                    line_upper = line.upper()
                    for pattern in critical_patterns:
                        if pattern in line_upper:
                            alerts_found.append({
                                'file': log_file,
                                'line': line_num,
                                'content': line.strip(),
                                'pattern': pattern
                            })
                            break
            except Exception as e:
                print(f"   ‚ùå Error leyendo {log_file}: {e}")
        else:
            print(f"   ‚ö†Ô∏è {log_file} no encontrado")
    
    if alerts_found:
        print(f"\nüö® PROBLEMAS CR√çTICOS ENCONTRADOS EN LOGS:")
        print("-" * 50)
        
        for i, alert in enumerate(alerts_found[:10], 1):  # Mostrar solo los primeros 10
            print(f"\n{i}. {alert['file']} (l√≠nea {alert['line']})")
            print(f"   Patr√≥n: {alert['pattern']}")
            print(f"   Contenido: {alert['content'][:100]}...")
    else:
        print("‚úÖ No se encontraron patrones cr√≠ticos en los logs")

def generate_recommendations():
    """Genera recomendaciones basadas en las alertas"""
    
    print("\nüí° RECOMENDACIONES DE ACCI√ìN")
    print("=" * 40)
    
    recommendations = [
        "1. Verificar estado del sistema criptogr√°fico",
        "2. Revisar conectividad de red P2P",
        "3. Validar integridad del algoritmo de consenso",
        "4. Comprobar estado del almacenamiento distribuido",
        "5. Monitorear uso de recursos del sistema",
        "6. Revisar logs de seguridad para intrusiones"
    ]
    
    for rec in recommendations:
        print(f"   {rec}")
    
    print(f"\nüîß PR√ìXIMOS PASOS:")
    print("   ‚Ä¢ Ejecutar diagn√≥sticos completos del sistema")
    print("   ‚Ä¢ Implementar correcciones para alertas cr√≠ticas")
    print("   ‚Ä¢ Establecer monitoreo continuo")
    print("   ‚Ä¢ Documentar incidentes y resoluciones")

async def main():
    """Funci√≥n principal"""
    
    print(f"üïê Iniciando investigaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    await investigate_critical_alerts()
    generate_recommendations()
    
    print(f"\n‚úÖ Investigaci√≥n completada: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    asyncio.run(main())