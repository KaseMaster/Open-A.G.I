# AEGIS Framework - Docker Compose Configuration
# Advanced Encrypted Governance and Intelligence System
version: '3.8'

services:
  # Main AEGIS Application
  aegis-core:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    container_name: aegis-core
    hostname: aegis-core
    restart: unless-stopped
    environment:
      - AEGIS_ENV=production
      - AEGIS_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - AEGIS_CONFIG_PATH=/app/config/config.yml
      - AEGIS_DATA_DIR=/app/data
      - AEGIS_BACKUP_DIR=/app/backups
      - AEGIS_CERT_DIR=/app/certs
      - AEGIS_DASHBOARD_PORT=8080
      - AEGIS_P2P_PORT=8181
      - AEGIS_METRICS_PORT=9090
      - AEGIS_PROMETHEUS_PORT=9091
    ports:
      - "8080:8080"   # Dashboard
      - "8181:8181"   # P2P Network
      - "9090:9090"   # Metrics
      - "9091:9091"   # Prometheus
    volumes:
      - aegis_data:/app/data
      - aegis_logs:/app/logs
      - aegis_backups:/app/backups
      - aegis_certs:/app/certs
      - ./config:/app/config:ro
    networks:
      - aegis-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: aegis-redis
    hostname: aegis-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-aegis_redis_pass}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-aegis_redis_pass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - aegis-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: aegis-postgres
    hostname: aegis-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-aegis}
      - POSTGRES_USER=${POSTGRES_USER:-aegis}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aegis_secure_pass}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    networks:
      - aegis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aegis} -d ${POSTGRES_DB:-aegis}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: aegis-prometheus
    hostname: aegis-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9092:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
    networks:
      - aegis-network
    depends_on:
      - aegis-core
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: aegis-grafana
    hostname: aegis-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-aegis_grafana_pass}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - aegis-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: aegis-nginx
    hostname: aegis-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    networks:
      - aegis-network
    depends_on:
      - aegis-core
      - grafana
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    security_opt:
      - no-new-privileges:true

  # TOR proxy for enhanced privacy
  tor:
    image: dperson/torproxy:latest
    container_name: aegis-tor
    hostname: aegis-tor
    restart: unless-stopped
    environment:
      - TOR_NewCircuitPeriod=60
      - TOR_MaxCircuitDirtiness=300
    ports:
      - "9050:9050"   # SOCKS proxy
      - "9051:9051"   # Control port
    volumes:
      - tor_data:/var/lib/tor
      - ./config/tor/torrc:/etc/tor/torrc:ro
    networks:
      - aegis-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 32M
    security_opt:
      - no-new-privileges:true

# Named volumes for persistent data
volumes:
  aegis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  aegis_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  aegis_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./backups
  aegis_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./certs
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  tor_data:
    driver: local

# Custom network for service communication
networks:
  aegis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: aegis-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500

# Development override (use with docker-compose -f docker-compose.yml -f docker-compose.dev.yml up)
# This file provides production-ready configuration