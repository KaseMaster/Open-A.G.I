# AEGIS Framework - Development Docker Compose Override
# Advanced Encrypted Governance and Intelligence System
# Use with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
version: '3.8'

services:
  # Development overrides for AEGIS Core
  aegis-core:
    build:
      target: development
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-dev}
        VERSION: ${VERSION:-dev}
    environment:
      - AEGIS_ENV=development
      - AEGIS_LOG_LEVEL=DEBUG
      - AEGIS_DEBUG=true
      - AEGIS_HOT_RELOAD=true
      - AEGIS_PROFILING=true
    volumes:
      # Mount source code for hot reloading
      - .:/app:cached
      - /app/__pycache__
      - /app/.pytest_cache
      - aegis_dev_data:/app/data
      - aegis_dev_logs:/app/logs
    ports:
      - "8080:8080"   # Dashboard
      - "8181:8181"   # P2P Network
      - "9090:9090"   # Metrics
      - "9091:9091"   # Prometheus
      - "5678:5678"   # Debug port
    command: ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "--wait-for-client", "main.py", "--dev"]
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G

  # Development Redis with less strict configuration
  redis:
    command: redis-server --appendonly yes --requirepass dev_password --loglevel debug
    environment:
      - REDIS_PASSWORD=dev_password
    volumes:
      - redis_dev_data:/data

  # Development PostgreSQL with sample data
  postgres:
    environment:
      - POSTGRES_DB=aegis_dev
      - POSTGRES_USER=aegis_dev
      - POSTGRES_PASSWORD=dev_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./config/postgres/dev_init.sql:/docker-entrypoint-initdb.d/dev_init.sql:ro
      - ./test/fixtures:/docker-entrypoint-initdb.d/fixtures:ro

  # Development Prometheus with shorter retention
  prometheus:
    command:
      - '--config.file=/etc/prometheus/prometheus.dev.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
      - '--log.level=debug'
    volumes:
      - prometheus_dev_data:/prometheus
      - ./config/prometheus/prometheus.dev.yml:/etc/prometheus/prometheus.dev.yml:ro

  # Development Grafana with development plugins
  grafana:
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=dev_password
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_LOG_LEVEL=debug
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./config/grafana/dev:/etc/grafana/provisioning:ro

  # Development services
  
  # Jupyter notebook for data analysis and experimentation
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: aegis-jupyter
    hostname: aegis-jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=aegis_dev_token
    ports:
      - "8888:8888"
    volumes:
      - .:/home/jovyan/work:cached
      - jupyter_data:/home/jovyan/.jupyter
    networks:
      - aegis-network
    depends_on:
      - aegis-core
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: aegis-mailhog
    hostname: aegis-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"   # SMTP
      - "8025:8025"   # Web UI
    networks:
      - aegis-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: aegis-adminer
    hostname: aegis-adminer
    restart: unless-stopped
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    ports:
      - "8081:8080"
    networks:
      - aegis-network
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aegis-redis-commander
    hostname: aegis-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:dev_password
    ports:
      - "8082:8081"
    networks:
      - aegis-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

  # Elasticsearch for advanced logging and search (development only)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: aegis-elasticsearch
    hostname: aegis-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - aegis-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: aegis-kibana
    hostname: aegis-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    networks:
      - aegis-network
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: aegis-jaeger
    hostname: aegis-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"   # Web UI
      - "14268:14268"   # HTTP collector
      - "14250:14250"   # gRPC collector
      - "6831:6831/udp" # UDP collector
    networks:
      - aegis-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

# Development-specific volumes
volumes:
  aegis_dev_data:
    driver: local
  aegis_dev_logs:
    driver: local
  redis_dev_data:
    driver: local
  postgres_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local
  jupyter_data:
    driver: local
  elasticsearch_data:
    driver: local