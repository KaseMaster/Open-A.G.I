#!/usr/bin/env python3
"""
üéØ AEGIS Developer CLI - Sprint 3.3
CLI avanzado con templates, documentaci√≥n y experiencia de desarrollo mejorada
"""

import asyncio
import click
import json
import os
from pathlib import Path
from typing import Dict, List, Any, Optional
import logging

# Importar componentes de AEGIS
from aegis_sdk import AEGIS
from aegis_templates import AEGISTemplates

logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

class AEGISDeveloperCLI:
    """CLI avanzado para desarrolladores de AEGIS"""

    def __init__(self):
        self.aegis: Optional[AEGIS] = None
        self.templates = AEGISTemplates()
        self.current_project: Optional[Path] = None

    async def initialize(self, api_key: Optional[str] = None):
        """Inicializar CLI"""
        self.aegis = AEGIS(api_key)

        # Verificar conexi√≥n
        result = await self.aegis.client.health_check()
        if not result.success:
            click.echo(f"‚ö†Ô∏è  Warning: Could not connect to AEGIS - {result.error}")
        else:
            click.echo("‚úÖ Connected to AEGIS Framework")

    async def create_project_from_template(self, template_name: str, project_name: str,
                                         output_dir: str = "./") -> bool:
        """Crear proyecto desde template"""

        try:
            # Verificar que el template existe
            if template_name not in [t["id"] for t in self.templates.list_templates()]:
                click.echo(f"‚ùå Template '{template_name}' not found")
                return False

            # Crear el proyecto
            project_path = self.templates.generate_project(template_name, project_name, output_dir)

            click.echo(f"‚úÖ Project '{project_name}' created successfully!")
            click.echo(f"üìÅ Location: {project_path}")
            click.echo("")
            click.echo("üöÄ Quick start:")
            click.echo(f"   cd {project_path}")
            click.echo("   pip install -r requirements.txt"
            click.echo("   python main.py")

            return True

        except Exception as e:
            click.echo(f"‚ùå Error creating project: {e}")
            return False

    async def show_template_info(self, template_name: Optional[str] = None):
        """Mostrar informaci√≥n de templates"""

        if template_name:
            # Mostrar informaci√≥n espec√≠fica
            try:
                info = self.templates.get_template_info(template_name)
                click.echo(f"üìã Template: {info['name']}")
                click.echo(f"üìù Description: {info['description']}")
                click.echo(f"üè∑Ô∏è  Category: {info['category']}")
                click.echo(f"‚è±Ô∏è  Time: {info['estimated_time']}")
                click.echo("")
                click.echo("üìÅ Files included:")
                for file in info['files']:
                    click.echo(f"   ‚Ä¢ {file}")
                click.echo("")
                click.echo("üìñ README:")
                click.echo(info['readme'][:500] + "..." if len(info['readme']) > 500 else info['readme'])
            except ValueError:
                click.echo(f"‚ùå Template '{template_name}' not found")
        else:
            # Listar todos los templates
            templates = self.templates.list_templates()

            if not templates:
                click.echo("‚ùå No templates available")
                return

            click.echo("üéØ Available Templates:")
            click.echo("=" * 50)

            # Agrupar por categor√≠a
            categories = {}
            for template in templates:
                cat = template["category"]
                if cat not in categories:
                    categories[cat] = []
                categories[cat].append(template)

            for category, temps in categories.items():
                click.echo(f"\nüè∑Ô∏è  {category.upper()}:")
                for template in temps:
                    click.echo(f"   ‚Ä¢ {template['id']}: {template['name']}")
                    click.echo(f"     {template['description']}")
                    click.echo(f"     üìÅ {template['files_count']} files, ‚è±Ô∏è  {template['estimated_time']}")

    async def run_quick_start(self, use_case: str) -> bool:
        """Ejecutar inicio r√°pido para caso de uso"""

        if not self.aegis:
            click.echo("‚ùå CLI not initialized")
            return False

        try:
            # Configuraci√≥n b√°sica para demos
            if use_case == "federated":
                config = {
                    "model_id": "demo_model",
                    "participants": ["node_1", "node_2", "node_3"]
                }
            elif use_case == "edge":
                config = {
                    "model_id": "mobile_net",
                    "devices": [{"device_type": "raspberry_pi", "capabilities": ["inference_only"]}]
                }
            elif use_case == "cloud":
                config = {
                    "name": "demo_deployment",
                    "provider": "aws",
                    "instance_type": "t2_micro",
                    "count": 1
                }
            else:
                click.echo(f"‚ùå Unknown use case: {use_case}")
                return False

            click.echo(f"üöÄ Starting quick {use_case} demo...")

            result = await self.aegis.quick_start(use_case, config)

            if result.success:
                click.echo(f"‚úÖ {use_case.title()} demo completed successfully!")
                if result.data:
                    click.echo(f"üìä Result: {json.dumps(result.data, indent=2)}")
            else:
                click.echo(f"‚ùå Demo failed: {result.error}")

            return result.success

        except Exception as e:
            click.echo(f"‚ùå Error running demo: {e}")
            return False

# ===== CLI COMMANDS =====

@click.group()
@click.option('--api-key', envvar='AEGIS_API_KEY', help='AEGIS API Key')
@click.option('--verbose', '-v', is_flag=True, help='Enable verbose output')
@click.pass_context
def aegis_cli(ctx, api_key, verbose):
    """üéØ AEGIS Developer CLI - Sprint 3.3

    Advanced CLI for AEGIS Framework development with templates,
    documentation, and enhanced developer experience.
    """
    ctx.ensure_object(dict)
    ctx.obj['cli'] = AEGISDeveloperCLI()
    ctx.obj['verbose'] = verbose

    # Initialize CLI
    asyncio.run(ctx.obj['cli'].initialize(api_key))

@aegis_cli.command()
@click.argument('template_name', required=False)
@click.pass_context
def templates(ctx, template_name):
    """üéØ List and show information about AEGIS templates

    Templates provide pre-configured boilerplates for common use cases.

    Examples:
        aegis templates                    # List all templates
        aegis templates federated_learning # Show specific template info
    """
    asyncio.run(ctx.obj['cli'].show_template_info(template_name))

@aegis_cli.command()
@click.argument('template_name')
@click.argument('project_name')
@click.option('--output-dir', '-o', default='./', help='Output directory')
@click.pass_context
def create(ctx, template_name, project_name, output_dir):
    """üìÅ Create a new project from an AEGIS template

    Generate a complete project structure with all necessary files,
    dependencies, and documentation.

    Examples:
        aegis create federated_learning my_federated_project
        aegis create cloud_deployment my_cloud_app --output-dir ./projects
    """
    success = asyncio.run(ctx.obj['cli'].create_project_from_template(
        template_name, project_name, output_dir
    ))

    if success and ctx.obj['verbose']:
        click.echo("
üí° Next steps:"        click.echo("   1. Review the generated README.md for detailed instructions")
        click.echo("   2. Install dependencies: pip install -r requirements.txt")
        click.echo("   3. Run the application: python main.py")
        click.echo("   4. Check the documentation in the docs/ folder")

@aegis_cli.command()
@click.argument('use_case', type=click.Choice(['federated', 'edge', 'cloud']))
@click.pass_context
def quickstart(ctx, use_case):
    """üöÄ Quick start demo for common use cases

    Run a complete working example to see AEGIS capabilities in action.

    Available demos:
        federated: Federated learning with multiple participants
        edge:      Edge computing with device deployment
        cloud:     Cloud deployment with auto-scaling

    Examples:
        aegis quickstart federated
        aegis quickstart edge
        aegis quickstart cloud
    """
    success = asyncio.run(ctx.obj['cli'].run_quick_start(use_case))

    if success and ctx.obj['verbose']:
        click.echo(f"\nüìö Learn more about {use_case} development:")
        click.echo("   ‚Ä¢ Check the generated code and documentation")
        click.echo("   ‚Ä¢ Visit: https://docs.aegis-framework.com")
        click.echo("   ‚Ä¢ Join our developer community on Discord")

@aegis_cli.command()
@click.option('--format', '-f', type=click.Choice(['table', 'json']), default='table',
              help='Output format')
@click.pass_context
def status(ctx, format):
    """üìä Show current AEGIS system status

    Display information about connected components, active deployments,
    and system health.

    Examples:
        aegis status              # Table format (default)
        aegis status --format json # JSON format
    """
    # This would show actual system status in a real implementation
    status_data = {
        "framework_version": "3.3.0",
        "components": {
            "sdk": "connected",
            "ml_engine": "active",
            "cloud_orchestrator": "ready",
            "edge_system": "ready",
            "federated_coordinator": "ready"
        },
        "active_deployments": 0,
        "connected_devices": 0,
        "system_health": "excellent"
    }

    if format == 'json':
        click.echo(json.dumps(status_data, indent=2))
    else:
        click.echo("üìä AEGIS System Status")
        click.echo("=" * 30)
        click.echo(f"Version: {status_data['framework_version']}")
        click.echo(f"Health:  {status_data['system_health']}")
        click.echo("")
        click.echo("Components:")
        for comp, status in status_data['components'].items():
            click.echo(f"  ‚Ä¢ {comp}: {status}")
        click.echo("")
        click.echo("Active Resources:")
        click.echo(f"  ‚Ä¢ Deployments: {status_data['active_deployments']}")
        click.echo(f"  ‚Ä¢ Edge devices: {status_data['connected_devices']}")

@aegis_cli.command()
@click.argument('topic', required=False)
@click.pass_context
def docs(ctx, topic):
    """üìñ Access AEGIS documentation and guides

    Get help with AEGIS development, best practices, and troubleshooting.

    Available topics:
        getting-started: Basic setup and first steps
        api-reference:   Complete API documentation
        best-practices:  Development guidelines
        troubleshooting: Common issues and solutions

    Examples:
        aegis docs                    # Show all available topics
        aegis docs getting-started    # Show getting started guide
    """
    docs_content = {
        "getting-started": """
üéØ Getting Started with AEGIS

1. Install the SDK:
   pip install aegis-sdk

2. Set up your API key:
   export AEGIS_API_KEY="your-api-key-here"

3. Create your first project:
   aegis create federated_learning my_first_project

4. Run the project:
   cd my_first_project
   pip install -r requirements.txt
   python main.py

For more detailed guides, visit: https://docs.aegis-framework.com/getting-started
        """,
        "api-reference": """
üîß AEGIS API Reference

Core Classes:
  ‚Ä¢ AEGIS: Main client class
  ‚Ä¢ AEGISClient: Low-level API client
  ‚Ä¢ MLFrameworkManager: ML model management
  ‚Ä¢ FederatedLearningCoordinator: FL orchestration

Key Methods:
  ‚Ä¢ register_model(): Register a new ML model
  ‚Ä¢ predict(): Run model inference
  ‚Ä¢ start_federated_training(): Begin FL training
  ‚Ä¢ deploy_to_edge(): Deploy to edge devices
  ‚Ä¢ create_cloud_deployment(): Deploy to cloud

Complete API docs: https://docs.aegis-framework.com/api
        """,
        "best-practices": """
üí° AEGIS Development Best Practices

üîí Security:
  ‚Ä¢ Always use HTTPS in production
  ‚Ä¢ Rotate API keys regularly
  ‚Ä¢ Implement proper authentication
  ‚Ä¢ Use encrypted channels for sensitive data

‚ö° Performance:
  ‚Ä¢ Optimize models for target hardware
  ‚Ä¢ Use appropriate batch sizes
  ‚Ä¢ Monitor resource usage
  ‚Ä¢ Implement proper error handling

üß† ML Best Practices:
  ‚Ä¢ Validate models before deployment
  ‚Ä¢ Use federated learning for privacy
  ‚Ä¢ Monitor model performance
  ‚Ä¢ Implement gradual rollouts

üìä Monitoring:
  ‚Ä¢ Set up comprehensive logging
  ‚Ä¢ Use structured logging (JSON)
  ‚Ä¢ Monitor key metrics
  ‚Ä¢ Set up alerts for anomalies
        """,
        "troubleshooting": """
üîß Troubleshooting Guide

Common Issues:

‚ùå "Connection refused"
   ‚Üí Check if AEGIS services are running
   ‚Üí Verify API key is correct
   ‚Üí Check network connectivity

‚ùå "Model not found"
   ‚Üí Ensure model is registered first
   ‚Üí Check model ID spelling
   ‚Üí Verify model format compatibility

‚ùå "Deployment failed"
   ‚Üí Check cloud provider credentials
   ‚Üí Verify resource quotas
   ‚Üí Review deployment logs

‚ùå "Federated training stuck"
   ‚Üí Check participant connectivity
   ‚Üí Verify model compatibility
   ‚Üí Review network timeouts

For more help: https://docs.aegis-framework.com/troubleshooting
        """
    }

    if topic and topic in docs_content:
        click.echo(docs_content[topic])
    else:
        click.echo("üìñ AEGIS Documentation Topics:")
        click.echo("=" * 40)
        for topic_name in docs_content.keys():
            topic_title = topic_name.replace('-', ' ').title()
            click.echo(f"  ‚Ä¢ {topic_name}: {topic_title}")

        if topic:
            click.echo(f"\n‚ùå Topic '{topic}' not found. Use one of the topics above.")

@aegis_cli.command()
@click.pass_context
def version(ctx):
    """üìã Show AEGIS version information"""
    version_info = {
        "framework": "AEGIS Framework",
        "version": "3.3.0",
        "sprint": "3.3 - Developer Experience",
        "components": [
            "Core SDK (aegis_sdk.py)",
            "Templates System (aegis_templates.py)",
            "Advanced CLI (aegis_cli.py)",
            "ML Framework Integration",
            "Federated Learning System",
            "Multi-Cloud Orchestration",
            "Edge Computing Platform"
        ],
        "python_requires": ">=3.8",
        "license": "MIT"
    }

    click.echo("üìã AEGIS Framework Version Information")
    click.echo("=" * 45)
    click.echo(f"Framework: {version_info['framework']}")
    click.echo(f"Version:   {version_info['version']}")
    click.echo(f"Sprint:    {version_info['sprint']}")
    click.echo(f"License:   {version_info['license']}")
    click.echo("")
    click.echo("Components:")
    for component in version_info['components']:
        click.echo(f"  ‚úÖ {component}")

@aegis_cli.command()
@click.option('--project-name', '-n', help='Name for the generated project')
@click.option('--template', '-t', default='hybrid_system',
              help='Template to use for the project')
@click.option('--output-dir', '-o', default='./',
              help='Directory to create the project in')
@click.pass_context
def scaffold(ctx, project_name, template, output_dir):
    """üèóÔ∏è Scaffold a complete AEGIS project

    Create a full-featured AEGIS project with best practices,
    testing, documentation, and deployment configuration.

    This is a comprehensive starter template that includes:
    - Complete project structure
    - Unit and integration tests
    - Docker configuration
    - CI/CD pipeline
    - Documentation
    - Monitoring setup

    Examples:
        aegis scaffold --project-name my_aegis_app
        aegis scaffold -n my_app -t federated_learning -o ./projects
    """
    if not project_name:
        project_name = click.prompt("Enter project name")

    click.echo(f"üèóÔ∏è  Scaffolding AEGIS project: {project_name}")
    click.echo(f"üìã Using template: {template}")

    success = asyncio.run(ctx.obj['cli'].create_project_from_template(
        template, project_name, output_dir
    ))

    if success:
        project_path = Path(output_dir) / project_name
        click.echo("
üéâ Project scaffolded successfully!"        click.echo("
üìÅ Project structure created:"        click.echo(f"   {project_path}/")
        click.echo("   ‚îú‚îÄ‚îÄ src/                 # Source code")
        click.echo("   ‚îú‚îÄ‚îÄ tests/              # Test suites")
        click.echo("   ‚îú‚îÄ‚îÄ docs/               # Documentation")
        click.echo("   ‚îú‚îÄ‚îÄ docker/             # Docker configs")
        click.echo("   ‚îú‚îÄ‚îÄ config/             # Configuration files")
        click.echo("   ‚îú‚îÄ‚îÄ scripts/            # Utility scripts")
        click.echo("   ‚îî‚îÄ‚îÄ README.md           # Project documentation")

        click.echo("
üöÄ Quick start:"        click.echo(f"   cd {project_path}")
        click.echo("   python -m venv venv")
        click.echo("   source venv/bin/activate  # On Windows: venv\\Scripts\\activate")
        click.echo("   pip install -r requirements.txt")
        click.echo("   python -m pytest tests/    # Run tests")
        click.echo("   python src/main.py        # Run application")

        if ctx.obj['verbose']:
            click.echo("
üí° Advanced features included:"            click.echo("   ‚Ä¢ Comprehensive test suite with 90%+ coverage")
            click.echo("   ‚Ä¢ Docker multi-stage builds for production")
            click.echo("   ‚Ä¢ GitHub Actions CI/CD pipeline")
            click.echo("   ‚Ä¢ Prometheus/Grafana monitoring stack")
            click.echo("   ‚Ä¢ Terraform infrastructure as code")
            click.echo("   ‚Ä¢ API documentation with OpenAPI/Swagger")
            click.echo("   ‚Ä¢ Security scanning and vulnerability checks")
            click.echo("   ‚Ä¢ Performance profiling and optimization tools")

# ===== MAIN =====

if __name__ == "__main__":
    aegis_cli()
