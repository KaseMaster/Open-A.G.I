#!/usr/bin/env python3
"""
Script para probar el acceso al dashboard AEGIS con autenticaci√≥n
"""

import requests
import json
import time
from requests.auth import HTTPBasicAuth

def test_dashboard_access():
    """Prueba el acceso al dashboard con diferentes m√©todos de autenticaci√≥n"""
    
    dashboard_url = "http://127.0.0.1:8090"
    username = "admin"
    password = "aegis123"
    
    print("üîç Probando acceso al Dashboard AEGIS...")
    print(f"üìä URL: {dashboard_url}")
    print(f"üë§ Usuario: {username}")
    
    # Test 1: Acceso sin autenticaci√≥n
    print("\n1Ô∏è‚É£ Probando acceso sin autenticaci√≥n...")
    try:
        response = requests.get(dashboard_url, timeout=5)
        print(f"   Status: {response.status_code}")
        if response.status_code == 401:
            print("   ‚úÖ Autenticaci√≥n requerida (esperado)")
        else:
            print(f"   ‚ö†Ô∏è Respuesta inesperada: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
        return False
    
    # Test 2: Acceso con Basic Auth
    print("\n2Ô∏è‚É£ Probando acceso con Basic Auth...")
    try:
        response = requests.get(
            dashboard_url, 
            auth=HTTPBasicAuth(username, password),
            timeout=5
        )
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Acceso exitoso con Basic Auth")
            print(f"   üìÑ Content-Type: {response.headers.get('Content-Type', 'N/A')}")
            return True
        else:
            print(f"   ‚ùå Fallo en autenticaci√≥n: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
    
    # Test 3: Login via POST
    print("\n3Ô∏è‚É£ Probando login via POST...")
    try:
        session = requests.Session()
        login_data = {
            'username': username,
            'password': password
        }
        
        response = session.post(
            f"{dashboard_url}/login",
            data=login_data,
            timeout=5
        )
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200 or response.status_code == 302:
            print("   ‚úÖ Login exitoso")
            
            # Probar acceso a la p√°gina principal con sesi√≥n
            response = session.get(dashboard_url, timeout=5)
            print(f"   Dashboard access: {response.status_code}")
            if response.status_code == 200:
                print("   ‚úÖ Acceso al dashboard con sesi√≥n exitoso")
                return True
        else:
            print(f"   ‚ùå Fallo en login: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
    
    # Test 4: Verificar endpoints espec√≠ficos
    print("\n4Ô∏è‚É£ Probando endpoints espec√≠ficos...")
    endpoints = ['/api/status', '/api/metrics', '/api/system']
    
    for endpoint in endpoints:
        try:
            response = requests.get(
                f"{dashboard_url}{endpoint}",
                auth=HTTPBasicAuth(username, password),
                timeout=5
            )
            print(f"   {endpoint}: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"   {endpoint}: Error - {e}")
    
    return False

def test_secure_chat_access():
    """Prueba el acceso al chat seguro"""
    
    chat_url = "http://[::1]:5173"
    
    print("\nüí¨ Probando acceso al Chat Seguro...")
    print(f"üìä URL: {chat_url}")
    
    try:
        response = requests.get(chat_url, timeout=5)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Chat seguro accesible")
            print(f"   üìÑ Content-Type: {response.headers.get('Content-Type', 'N/A')}")
            return True
        else:
            print(f"   ‚ö†Ô∏è Respuesta: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
    
    return False

def main():
    """Funci√≥n principal"""
    print("=" * 60)
    print("üîß AEGIS - Test de Acceso a Servicios Web")
    print("=" * 60)
    
    dashboard_ok = test_dashboard_access()
    chat_ok = test_secure_chat_access()
    
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE RESULTADOS")
    print("=" * 60)
    print(f"üìä Dashboard: {'‚úÖ FUNCIONANDO' if dashboard_ok else '‚ùå PROBLEMA'}")
    print(f"üí¨ Chat Seguro: {'‚úÖ FUNCIONANDO' if chat_ok else '‚ùå PROBLEMA'}")
    
    if dashboard_ok and chat_ok:
        print("\nüéâ Todos los servicios web est√°n funcionando correctamente!")
    elif dashboard_ok or chat_ok:
        print("\n‚ö†Ô∏è Algunos servicios tienen problemas de conectividad.")
    else:
        print("\n‚ùå Ambos servicios tienen problemas de conectividad.")
    
    print("\nüí° RECOMENDACIONES:")
    if not dashboard_ok:
        print("   ‚Ä¢ Verificar que el dashboard est√© ejecut√°ndose en puerto 8000")
        print("   ‚Ä¢ Confirmar credenciales: admin/aegis123")
        print("   ‚Ä¢ Revisar logs del dashboard para errores")
    
    if not chat_ok:
        print("   ‚Ä¢ Verificar que el chat UI est√© ejecut√°ndose en puerto 3000")
        print("   ‚Ä¢ Confirmar que npm run dev est√© activo")
        print("   ‚Ä¢ Revisar logs del proceso Node.js")

if __name__ == "__main__":
    main()