name: AEGIS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Ejecutar tests de seguridad diariamente
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.13'
  POETRY_VERSION: '1.8.3'

jobs:
  # ===== TESTS Y CALIDAD DE CÓDIGO =====
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    # ===== TESTS UNITARIOS =====
    - name: Run unit tests
      run: |
        poetry run pytest tests/ -v --cov=aegis --cov-report=xml --cov-report=term-missing \
          --durations=10 --tb=short -m "not integration and not e2e"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    # ===== TESTS DE INTEGRACIÓN =====
    - name: Run integration tests
      run: |
        poetry run pytest tests/ -v -k "integration or e2e" --tb=short --durations=10

    # ===== LINTING Y CALIDAD =====
    - name: Run linting
      run: |
        poetry run flake8 aegis/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 aegis/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run mypy type checking
      run: |
        poetry run mypy aegis/ --ignore-missing-imports --no-strict-optional

    - name: Run security linting
      run: |
        poetry run bandit -r aegis/ -f json -o security_report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report-${{ matrix.python-version }}
        path: security_report.json

  # ===== TESTS DE SEGURIDAD =====
  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run safety check (vulnerable dependencies)
      run: |
        poetry run safety check --json > safety_report.json || true

    - name: Run pip-audit (alternative security audit)
      run: |
        poetry run pip-audit --format json > pip_audit_report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-reports
        path: |
          safety_report.json
          pip_audit_report.json

    - name: Fail on critical vulnerabilities
      run: |
        if [ -f safety_report.json ]; then
          CRITICAL_VULNS=$(jq '.issues | map(select(.severity == "critical")) | length' safety_report.json)
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "🚨 CRITICAL VULNERABILITIES FOUND: $CRITICAL_VULNS"
            jq '.issues | map(select(.severity == "critical"))' safety_report.json
            exit 1
          fi
        fi

  # ===== BUILD Y PACKAGING =====
  build:
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Build package
      run: poetry build

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import aegis; print('✅ Package installation successful')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: aegis-package
        path: dist/

  # ===== DOCKER BUILD =====
  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: kasemaster/aegis-framework
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        path: .
        artifact-name: aegis-sbom
        format: spdx-json

  # ===== DEPLOYMENT =====
  deploy:
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Aquí irían los comandos de deployment específicos
        # Por ejemplo: kubectl, docker-compose, serverless, etc.

    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests..."
        # Tests básicos post-deployment

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Deployment completed successfully"
        # Aquí podría ir una notificación a Slack/Discord

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Deployment failed"
        # Notificación de fallo

  # ===== RELEASE =====
  release:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')

    steps:
    - uses: actions/checkout@v4

    - name: Extract version from commit message
      id: version
      run: |
        VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'release: \Kv\d+\.\d+\.\d+')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## AEGIS Framework ${{ steps.version.outputs.version }}

          ### Changes
          - See commit history for detailed changes

          ### Security
          - All security scans passed
          - Dependencies audited
          - Code quality checks completed

          ### Deployment
          - Docker images built and pushed
          - Staging deployment successful
        draft: false
        prerelease: false

    - name: Publish to PyPI
      if: success()
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
        poetry publish

  # ===== DEPENDENCY UPDATES =====
  dependabot:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4

    - name: Check for dependency updates
      run: |
        poetry update --dry-run > dependency_updates.txt || true

    - name: Create dependency update PR
      if: success()
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          🔄 chore: update dependencies

          - Security updates
          - Package version bumps
          - Automated dependency management
        title: '🔄 Dependency Updates'
        body: |
          ## Dependency Updates

          This PR updates project dependencies to their latest secure versions.

          ### Changes
          - Security patches applied
          - Minor version updates
          - Compatibility improvements

          ### Testing
          - All tests pass
          - Security scans clean
          - No breaking changes detected
        branch: automated/dependency-updates
        delete-branch: true
